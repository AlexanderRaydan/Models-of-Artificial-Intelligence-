{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"models.py","provenance":[],"collapsed_sections":[],"mount_file_id":"1gu_sb4NX8rz3wBeC9AoxFdcNhj9AtJ8P","authorship_tag":"ABX9TyPGiq26K5UAWwtFhVfCTse3"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"m-ckTRpCfThy","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.svm import SVR\n","from sklearn.model_selection import GridSearchCV\n","\n","from utils import Utils\n","\n","class Models:\n","\n","  def __init__(self):\n","    self.reg = {\n","        'SVR': SVR(),\n","        'GRADIEND': GradientBoostingRegressor\n","    }\n","\n","    self.params = {\n","        'SVR': {\n","            'kernel' : ['linear' , 'poly' , 'rbf'],\n","            'gamma' : ['auto' , 'scale'],\n","            'C' : [1,5,10]\n","        },\n","\n","        'GRADIEND' : {\n","            'loss' : ['ls' , 'lad'],\n","            'learnin_rate' : [0.01 , 0.05 , 0.1]\n","        }\n","    }\n","\n","    def grid_training(self , X , y):\n","      best_score = 999\n","      best_model = None\n","\n","      for name , reg in self.reg.items():\n","\n","        grid_reg = GridSearchCV(reg , self.params[name] , cv = 3 ).fit(X , y.values.ravel())\n","        score = np.abs(grid_reg.best_score_)\n","\n","        if score < best_model:\n","          best_score = best_score \n","          best_model = grid_reg.best_estimator_\n","\n","      utils = Utils()\n","      utils.model_export(best_model , best_score)\n"],"execution_count":0,"outputs":[]}]}